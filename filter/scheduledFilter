#!/bin/bash
###############################################################################
##
# FILE:         scheduledFilter
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 29-Dec-2011
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2012 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)scheduledFilter	$Id$	todo.txt-cli-ex
###############################################################################

export TODOTXT_FILTER_SCHEDULED=${TODOTXT_FILTER_SCHEDULED:-1}

# Attention: This filter is to be used in pre_filter_command, before formatting
# and coloring of priorities. It won't work as a TODOTXT_FINAL_FILTER!
if [ $TODOTXT_FILTER_SCHEDULED -ne 0 ]; then
    awk --re-interval -v date=$1 '
function getThreshold(date) {
    if (date == "") {
        return mktime(strftime("%Y %m %d 00 00 00", systime()))
    } else {
        return mktime(gensub(/([0-9]{4})-([0-9]{2})-([0-9]{2})/, "\\1 \\2 \\3 00 00 00", "", date))
    }
}
BEGIN {
    threshold = getThreshold(date)
}
{ IGNORECASE = 1 }
/ message-id:[[:alnum:]=.<>_\-/@#]+/ {
    $0=gensub(/ (message-id:[[:alnum:]=.<>_\-/@#]+)/, " a:(mutt)", "");
}
{ IGNORECASE = 0 }
/ *[0-9]+ [xX] / {
    # Do not process done tasks.
    print
    next
}
/ [[:upper:]]:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    # Later dates have precedence over earlier ones. If multiple priorities are
    # scheduled on the same date, the last one wins.
    bestDate = ""
    bestPrio = ""
    for (i = 1; i <= NF; i++) {
        dateString = gensub(/^[[:upper:]]:([0-9]{4})-([0-9]{2})-([0-9]{2})/, "\\1 \\2 \\3 00 00 00", "", $i)
        if (dateString == $i) continue

        date = mktime(dateString)
        if (date > threshold) {
            # Not yet applicable.
            continue
        }

        if (date >= bestDate) {
            bestDate = date
            bestPrio = substr($i, 1, 1)
        }
    }

    if (bestPrio != "") {
        $0 = gensub(/^( *[0-9]+ )(\(.\) )?/, "\\1(" bestPrio ") ", "")
    }
}
/ d:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    date = mktime(gensub(/^.* d:([0-9]{4})-([0-9]{2})-([0-9]{2})([^0-9].*)?$/, "\\1 \\2 \\3 00 00 00", ""))
    if (date <= threshold) {
        $0 = gensub(/^( *[0-9]+ )\(.\) /, "\\1", "")
    }
}
/ x:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    date = mktime(gensub(/^.* x:([0-9]{4})-([0-9]{2})-([0-9]{2})([^0-9].*)?$/, "\\1 \\2 \\3 00 00 00", ""))
    if (date <= threshold) {
        dateString = gensub(/^.* x:([0-9]{4}-[0-9]{2}-[0-9]{2})([^0-9].*)?$/, "\\1", "")
        $0 = gensub(/^( *[0-9]+ )(\(.\) )?/, "\\1X " dateString " ", "")
    }
}
/ z:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    date = mktime(gensub(/^.* z:([0-9]{4})-([0-9]{2})-([0-9]{2})([^0-9].*)?$/, "\\1 \\2 \\3 00 00 00", ""))
    # do-until-then-trash tasks only get trashed on the day _after_ the do-until date.
    if (date < threshold) {
        dateString = gensub(/^.* z:([0-9]{4}-[0-9]{2}-[0-9]{2})([^0-9].*)?$/, "\\1", "")
        $0 = gensub(/^( *[0-9]+ )(\(.\) )?/, "\\1X " dateString " ", "")
    }
}
{ print }
'
else
    cat
fi
